package vista;

import conexion.Conexion;
import basedatos.TablaCategoria;
import basedatos.TablaProducto;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.Categoria;
import modelo.Producto;
import static vista.VistaCapturaProducto.getUpper;

/**
 *
 * @author ediso
 */
public class VistaGestionarProducto extends javax.swing.JInternalFrame {

    private int idProducto;
    int obtenerIdCategoriaCombo = 0;

    public VistaGestionarProducto() {
        initComponents();
        this.setSize(new Dimension(1467, 500));
        this.setTitle("Gestionar Productos");
        //Cargar tabla
        this.CargarTablaProductos();
        this.CargarComboCategoria();

        //insertar imagen en nuestro JLabel
        ImageIcon wallpaper = new ImageIcon("D:\\Archivos\\Descargas\\SistemaDeventas1\\src\\img\\Images\\Fondo1.png");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(1480, 600, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_productos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton_actualizar = new javax.swing.JButton();
        jButton_eliminar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cajaNombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cajaCantidad = new javax.swing.JTextField();
        cajaPrecio = new javax.swing.JTextField();
        cajaDescripcion = new javax.swing.JTextField();
        cajaIva = new javax.swing.JComboBox<>();
        cajaCategoria = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        cajaCodigoBarras = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cajaMarca = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cajaContenido = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cajaUnidadMedida = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        CajaPresentacion = new javax.swing.JComboBox<>();
        jLabel_wallpaper = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 204));
        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Administrar Productos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setEnabled(false);

        jTable_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable_productos.setEnabled(false);
        jScrollPane1.setViewportView(jTable_productos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1270, 250));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 1290, 270));

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_actualizar.setBackground(new java.awt.Color(51, 204, 0));
        jButton_actualizar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_actualizar.setText("Actualizar");
        jButton_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_actualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jButton_eliminar.setBackground(new java.awt.Color(255, 51, 51));
        jButton_eliminar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_eliminar.setText("Eliminar");
        jButton_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 90, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1310, 50, 130, 270));

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Nombre:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 90, 20));

        cajaNombre.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cajaNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cajaNombreActionPerformed(evt);
            }
        });
        cajaNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaNombreKeyTyped(evt);
            }
        });
        jPanel3.add(cajaNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 170, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Presentacion:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 100, 110, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Precio:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 10, 90, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("IVA:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 70, 90, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Categoria:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 100, 90, -1));

        cajaCantidad.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cajaCantidad.setEnabled(false);
        jPanel3.add(cajaCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 70, 210, -1));

        cajaPrecio.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cajaPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cajaPrecioActionPerformed(evt);
            }
        });
        cajaPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaPrecioKeyTyped(evt);
            }
        });
        jPanel3.add(cajaPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 10, 170, -1));

        cajaDescripcion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cajaDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cajaDescripcionActionPerformed(evt);
            }
        });
        cajaDescripcion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaDescripcionKeyTyped(evt);
            }
        });
        jPanel3.add(cajaDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 40, 170, -1));

        cajaIva.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cajaIva.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione iva:", "No grava iva", "12%", "14%" }));
        jPanel3.add(cajaIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 70, 170, -1));

        cajaCategoria.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cajaCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione categoria:", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(cajaCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 100, 170, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Codigo Barras:");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 110, -1));

        cajaCodigoBarras.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cajaCodigoBarras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cajaCodigoBarrasActionPerformed(evt);
            }
        });
        cajaCodigoBarras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaCodigoBarrasKeyTyped(evt);
            }
        });
        jPanel3.add(cajaCodigoBarras, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, 170, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Marca: ");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 90, -1));

        cajaMarca.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cajaMarca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cajaMarcaActionPerformed(evt);
            }
        });
        cajaMarca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaMarcaKeyTyped(evt);
            }
        });
        jPanel3.add(cajaMarca, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 170, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Contenido: ");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, 90, -1));

        cajaContenido.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cajaContenido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cajaContenidoActionPerformed(evt);
            }
        });
        cajaContenido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaContenidoKeyTyped(evt);
            }
        });
        jPanel3.add(cajaContenido, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, 210, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Unidad Medida: ");
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 40, 120, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Descripcion:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 40, -1, -1));

        cajaUnidadMedida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione alguna medida", "Mililitros", "Litros", "Miligramos", "Kilogramos", "Piezas", "Hojas", "Milimetros", "Centimetros", "Metros", "Capsulas" }));
        jPanel3.add(cajaUnidadMedida, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 40, 210, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Cantidad:");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 70, 90, -1));

        CajaPresentacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione alguna presentacion", "Lata", "Botella de plastico", "Botella de vidrio", "Frasco de vidrio", "Frasco de plastico", "Caja de carton", "Bolsa", "Bulto", "Cilindro", "Paquete", "Envases flexibles", "Plastico", "Capsulas", "Barra", "Sobre", "Garrafa", "Rollo", "Bote", "Bolsa de nahilo", "Bolsa de carton" }));
        jPanel3.add(CajaPresentacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 100, 210, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 1290, 130));

        jLabel_wallpaper.setBackground(new java.awt.Color(255, 255, 204));
        jLabel_wallpaper.setForeground(new java.awt.Color(255, 255, 204));
        jLabel_wallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SistemaDeventas1/src/img/Images/FondoGestionVentas.png"))); // NOI18N
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1450, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_actualizarActionPerformed

        Producto producto = new Producto();
        TablaProducto controlProducto = new TablaProducto();
        String iva = "";
        String categoria = "";
        iva = cajaIva.getSelectedItem().toString().trim();
        categoria = cajaCategoria.getSelectedItem().toString().trim();

        //validar campos
        if (cajaNombre.getText().isEmpty() || cajaCantidad.getText().isEmpty() || cajaPrecio.getText().isEmpty()
                || cajaCodigoBarras.getText().isEmpty() || cajaMarca.getText().isEmpty()
                || cajaContenido.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Complete todos los campos");
        } else {
            if (iva.equalsIgnoreCase("Seleccione iva:")) {
                JOptionPane.showMessageDialog(null, "Seleccione iva.");
            } else {
                if (categoria.equalsIgnoreCase("Seleccione categoria:")) {
                    JOptionPane.showMessageDialog(null, "Seleccione categoria");
                } else {
                    try {
                        producto.setNombre(cajaNombre.getText().trim());
                        producto.setCodBarras(cajaCodigoBarras.getText().trim());
                        producto.setMarca(cajaMarca.getText().trim());

                        producto.setContenido(cajaContenido.getText());
                        producto.setPresentacion((String) CajaPresentacion.getSelectedItem());
                        producto.setunidadMedida((String) cajaUnidadMedida.getSelectedItem());
                        producto.setCantidad(Integer.parseInt(cajaCantidad.getText().trim()));

                        String precioTXT = "";
                        double Precio = 0.0;
                        precioTXT = cajaPrecio.getText().trim();
                        boolean aux = false;
                        /*
                            *Si el usuario ingresa , (coma) como punto decimal,
                            lo transformamos a punto (.)
                         */
                        for (int i = 0; i < precioTXT.length(); i++) {
                            if (precioTXT.charAt(i) == ',') {
                                String precioNuevo = precioTXT.replace(",", ".");
                                Precio = Double.parseDouble(precioNuevo);
                                aux = true;
                            }
                        }
                        //evaluar la condicion
                        if (aux == true) {
                            producto.setPrecio(Precio);
                        } else {
                            Precio = Double.parseDouble(precioTXT);
                            producto.setPrecio(Precio);
                        }

                        producto.setDescripcion(cajaDescripcion.getText().trim());
                        //Porcentaje IVA
                        if (iva.equalsIgnoreCase("No grava iva")) {
                            producto.setPorcentajeIva(0);
                        } else if (iva.equalsIgnoreCase("12%")) {
                            producto.setPorcentajeIva(12);
                        } else if (iva.equalsIgnoreCase("14%")) {
                            producto.setPorcentajeIva(14);
                        }

                        //idcategoria - cargar metodo que obtiene el id de categoria
                        this.IdCategoria();
                        producto.setIdCategoria(obtenerIdCategoriaCombo);

                        if (controlProducto.actualizar(producto, idProducto)) {
                            JOptionPane.showMessageDialog(null, "Registro Actualizado");
                            this.CargarComboCategoria();
                            this.CargarTablaProductos();
                            this.cajaIva.setSelectedItem("Seleccione iva:");
                            this.Limpiar();
                        } else {
                            JOptionPane.showMessageDialog(null, "Error al Actualizar");
                        }
                    } catch (HeadlessException | NumberFormatException e) {
                        System.out.println("Error en: " + e);
                    }
                }
            }
        }

    }//GEN-LAST:event_jButton_actualizarActionPerformed

    private void jButton_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminarActionPerformed
        TablaProducto controlProducto = new TablaProducto();
        if (idProducto == 0) {
            JOptionPane.showMessageDialog(null, "¡Seleccione un Producto!");
        } else {
            if (!controlProducto.eliminar(idProducto)) {
                JOptionPane.showMessageDialog(null, "¡Producto Eliminado!");
                this.CargarTablaProductos();
                this.CargarComboCategoria();
                this.Limpiar();
            } else {
                JOptionPane.showMessageDialog(null, "¡Error al eliminar producto!");
            }
        }
    }//GEN-LAST:event_jButton_eliminarActionPerformed

    private void cajaCodigoBarrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cajaCodigoBarrasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cajaCodigoBarrasActionPerformed

    private void cajaCodigoBarrasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaCodigoBarrasKeyTyped
        char[] letra = cajaCodigoBarras.getText().toCharArray();
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
        if (letra.length > 12) {
            evt.consume();
            cajaNombre.requestFocus();
        } else {

        }
    }//GEN-LAST:event_cajaCodigoBarrasKeyTyped

    private void cajaNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaNombreKeyTyped
        char caracter = evt.getKeyChar();
        if (!(Character.isLetter(caracter) || caracter == KeyEvent.VK_SPACE || caracter == KeyEvent.VK_BACK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_cajaNombreKeyTyped

    private void cajaMarcaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaMarcaKeyTyped
        char caracter = evt.getKeyChar();
        if (!(Character.isLetter(caracter) || caracter == KeyEvent.VK_SPACE || caracter == KeyEvent.VK_BACK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_cajaMarcaKeyTyped

    private void cajaContenidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaContenidoKeyTyped
        char[] letra = cajaContenido.getText().toCharArray();
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_cajaContenidoKeyTyped

    private void cajaPrecioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaPrecioKeyTyped
        char[] letra = cajaPrecio.getText().toCharArray();
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_cajaPrecioKeyTyped

    private void cajaDescripcionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaDescripcionKeyTyped
        char caracter = evt.getKeyChar();
        if (!(Character.isLetter(caracter) || caracter == KeyEvent.VK_SPACE || caracter == KeyEvent.VK_BACK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_cajaDescripcionKeyTyped

    private void cajaNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cajaNombreActionPerformed
        String nombre = cajaNombre.getText();
        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Digite el nombre del producto");
        } else {
            cajaNombre.setText(getUpper(nombre));
        }
    }//GEN-LAST:event_cajaNombreActionPerformed

    private void cajaMarcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cajaMarcaActionPerformed
        String marca = cajaMarca.getText();
        if (marca.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Digite la marca del producto");
        } else {
            cajaMarca.setText(getUpper(marca));
        }
    }//GEN-LAST:event_cajaMarcaActionPerformed

    private void cajaContenidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cajaContenidoActionPerformed
        String contenido = cajaContenido.getText();
        if (contenido.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Digite el contenido del producto");
        } else {
            cajaContenido.setText(getUpper(contenido));
        }
    }//GEN-LAST:event_cajaContenidoActionPerformed

    private void cajaPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cajaPrecioActionPerformed
        String precio = cajaPrecio.getText();
        if (precio.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Digite el precio de la venta del producto");
        }
    }//GEN-LAST:event_cajaPrecioActionPerformed

    private void cajaDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cajaDescripcionActionPerformed
        String descripcion = cajaDescripcion.getText();
        if (descripcion.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Digite la descripcion de la venta del producto");
        } else {
            cajaDescripcion.setText(getUpper(descripcion));
        }
    }//GEN-LAST:event_cajaDescripcionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CajaPresentacion;
    private javax.swing.JTextField cajaCantidad;
    private javax.swing.JComboBox<String> cajaCategoria;
    private javax.swing.JTextField cajaCodigoBarras;
    private javax.swing.JTextField cajaContenido;
    private javax.swing.JTextField cajaDescripcion;
    private javax.swing.JComboBox<String> cajaIva;
    private javax.swing.JTextField cajaMarca;
    private javax.swing.JTextField cajaNombre;
    private javax.swing.JTextField cajaPrecio;
    private javax.swing.JComboBox<String> cajaUnidadMedida;
    private javax.swing.JButton jButton_actualizar;
    private javax.swing.JButton jButton_eliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_productos;
    // End of variables declaration//GEN-END:variables

    /*
     * *****************************************************
     * metodo para limpiar
     * *****************************************************
     */
    private void Limpiar() {
        cajaNombre.setText("");
        cajaCantidad.setText("");
        cajaPrecio.setText("");
        cajaDescripcion.setText("");
        cajaIva.setSelectedItem("Seleccione iva:");
        cajaCategoria.setSelectedItem("Seleccione categoria:");
        cajaCodigoBarras.setText("");
        cajaContenido.setText("");
        cajaMarca.setText("");
        cajaUnidadMedida.setSelectedIndex(0);
        CajaPresentacion.setSelectedIndex(0);
    }

    /*
     * *****************************************************
     * metodo para cargar las categorias en el JCombox
     * *****************************************************
     */
    private void CargarComboCategoria() {
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_categoria";
        Statement st;
        try {

            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            cajaCategoria.removeAllItems();
            cajaCategoria.addItem("Seleccione categoria:");
            while (rs.next()) {
                cajaCategoria.addItem(rs.getString("descripcion"));
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("¡Error al cargar categorias!");
        }
    }

    /*
     * *****************************************************
     * metodo para mostrar todos los productos registrados
     * *****************************************************
     */
    String descripcionCategoria = "";
    double precio = 0.0;
    int porcentajeIva = 0;
    double IVA = 0;

    private void CargarTablaProductos() {
        Connection con = Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "select p.idProducto,p.codbarras, p.nombre,p.marca,p.contenido,p.unidadMedida, p.cantidad, p.precio, p.descripcion, p.porcentajeIva, c.descripcion, p.presentacion, p.fechacaducidad from tb_producto As p, tb_categoria As c where p.idCategoria = c.idCategoria;";
        Statement st;
        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            VistaGestionarProducto.jTable_productos = new JTable(model);
            VistaGestionarProducto.jScrollPane1.setViewportView(VistaGestionarProducto.jTable_productos);

            model.addColumn("N°");//ID
            model.addColumn("codigo Barras");
            model.addColumn("nombre");
            model.addColumn("marca");
            model.addColumn("Contenido");
            model.addColumn("Unidad Medida");
            model.addColumn("cantidad");
            model.addColumn("precio");
            model.addColumn("descripcion");
            model.addColumn("IVA");
            model.addColumn("Categoria");
            model.addColumn("Presentacion");
            model.addColumn("Fecha Caducidad");

            while (rs.next()) {

                precio = rs.getDouble("precio");
                porcentajeIva = rs.getInt("porcentajeIva");

                Object fila[] = new Object[13];//Edit tamaño
                for (int i = 0; i < 13; i++) {

                    if (i == 9) {//del iva
                        this.calcularIva(precio, porcentajeIva);//metodo
                        fila[i] = IVA;
                        rs.getObject(i + 1);
                    } else {
                        fila[i] = rs.getObject(i + 1);
                    }
                }
                model.addRow(fila);
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al llenar la tabla productos: " + e);
        }
        //evento para obtener campo al cual el usuario da click
        //y obtener la interfaz que mostrara la informacion general
        jTable_productos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = jTable_productos.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    idProducto = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosProductoSeleccionado(idProducto);//metodo
                }
            }
        });
    }

    /*
     * **************************************************
     * Metodo para calcular Iva
     * **************************************************
     */
    private double calcularIva(double precio, int iva) {
        int p_iva = iva;
        switch (p_iva) {
            case 0:
                IVA = 0.0;
                break;
            case 12:
                IVA = precio * 0.12;
                break;
            case 14:
                IVA = precio * 0.14;
                break;
            default:
                break;
        }
        //redondear decimales
        IVA = (double) Math.round(IVA * 100) / 100;
        return IVA;
    }

    /*
     * **************************************************
     * Metodo que envia datos seleccionados
     * **************************************************
     */
    private void EnviarDatosProductoSeleccionado(int idProducto) {
        try {
            Connection con = Conexion.conectar();
            PreparedStatement pst = con.prepareStatement(
                    "select * from tb_producto where idProducto = '" + idProducto + "'");
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                cajaCodigoBarras.setText(rs.getString("codbarras"));
                cajaNombre.setText(rs.getString("nombre"));
                cajaMarca.setText(rs.getString("marca"));

                cajaContenido.setText(rs.getString("contenido"));
                cajaUnidadMedida.setSelectedItem(rs.getString("unidadMedida"));
                cajaCantidad.setText(rs.getString("cantidad"));
                CajaPresentacion.setSelectedItem(rs.getString("presentacion"));
                cajaPrecio.setText(rs.getString("precio"));
                cajaDescripcion.setText(rs.getString("descripcion"));
                int iva = rs.getInt("porcentajeIva");
                switch (iva) {
                    case 0:
                        cajaIva.setSelectedItem("No grava iva");
                        break;
                    case 12:
                        cajaIva.setSelectedItem("12%");
                        break;
                    case 14:
                        cajaIva.setSelectedItem("14%");
                        break;
                    default:
                        cajaIva.setSelectedItem("Seleccione iva:");
                        break;
                }
                int idCate = rs.getInt("idCategoria");
                cajaCategoria.setSelectedItem(relacionarCategoria(idCate));
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al seleccionar producto: " + e);
        }
    }

    /*
     * **************************************************
     * Metodo para relacionar categorias
     * **************************************************
     */
    private String relacionarCategoria(int idCategoria) {

        String sql = "select descripcion from tb_categoria where idCategoria = '" + idCategoria + "'";
        Statement st;
        try {
            Connection cn = Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                descripcionCategoria = rs.getString("descripcion");
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("¡Error al obtener el id de la categoria!");
        }
        return descripcionCategoria;
    }

    /**
     *
     * Metodo para obtener id categoria
     */
    private int IdCategoria() {
        String sql = "select * from tb_categoria where descripcion = '" + this.cajaCategoria.getSelectedItem() + "'";
        Statement st;
        try {
            Connection cn = Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                obtenerIdCategoriaCombo = rs.getInt("idCategoria");
            }
        } catch (SQLException e) {
            System.out.println("Error al obener id categoria");
        }
        return obtenerIdCategoriaCombo;
    }
}
